// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package codebuild provides a client for CodeBuild.
package codebuild

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opBatchGetBuilds_New = "BatchGetBuilds_New"

// BatchGetBuilds_NewRequest generates a "aws/request.Request" representing the
// client's request for the BatchGetBuilds_New operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the BatchGetBuilds_New method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the BatchGetBuilds_NewRequest method.
//    req, resp := client.BatchGetBuilds_NewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) BatchGetBuilds_NewRequest(input *BatchGetBuilds_NewInput) (req *request.Request, output *BatchGetBuilds_NewOutput) {
	op := &request.Operation{
		Name:       opBatchGetBuilds_New,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchGetBuilds_NewInput{}
	}

	req = c.newRequest(op, input, output)
	output = &BatchGetBuilds_NewOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) BatchGetBuilds_New(input *BatchGetBuilds_NewInput) (*BatchGetBuilds_NewOutput, error) {
	req, out := c.BatchGetBuilds_NewRequest(input)
	err := req.Send()
	return out, err
}

const opBatchGetProjects = "BatchGetProjects"

// BatchGetProjectsRequest generates a "aws/request.Request" representing the
// client's request for the BatchGetProjects operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the BatchGetProjects method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the BatchGetProjectsRequest method.
//    req, resp := client.BatchGetProjectsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) BatchGetProjectsRequest(input *BatchGetProjectsInput) (req *request.Request, output *BatchGetProjectsOutput) {
	op := &request.Operation{
		Name:       opBatchGetProjects,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchGetProjectsInput{}
	}

	req = c.newRequest(op, input, output)
	output = &BatchGetProjectsOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) BatchGetProjects(input *BatchGetProjectsInput) (*BatchGetProjectsOutput, error) {
	req, out := c.BatchGetProjectsRequest(input)
	err := req.Send()
	return out, err
}

const opCreateProject = "CreateProject"

// CreateProjectRequest generates a "aws/request.Request" representing the
// client's request for the CreateProject operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the CreateProject method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the CreateProjectRequest method.
//    req, resp := client.CreateProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) CreateProjectRequest(input *CreateProjectInput) (req *request.Request, output *CreateProjectOutput) {
	op := &request.Operation{
		Name:       opCreateProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateProjectInput{}
	}

	req = c.newRequest(op, input, output)
	output = &CreateProjectOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) CreateProject(input *CreateProjectInput) (*CreateProjectOutput, error) {
	req, out := c.CreateProjectRequest(input)
	err := req.Send()
	return out, err
}

const opDeleteProject = "DeleteProject"

// DeleteProjectRequest generates a "aws/request.Request" representing the
// client's request for the DeleteProject operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the DeleteProject method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the DeleteProjectRequest method.
//    req, resp := client.DeleteProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) DeleteProjectRequest(input *DeleteProjectInput) (req *request.Request, output *DeleteProjectOutput) {
	op := &request.Operation{
		Name:       opDeleteProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteProjectInput{}
	}

	req = c.newRequest(op, input, output)
	output = &DeleteProjectOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) DeleteProject(input *DeleteProjectInput) (*DeleteProjectOutput, error) {
	req, out := c.DeleteProjectRequest(input)
	err := req.Send()
	return out, err
}

const opListBuildsForProject = "ListBuildsForProject"

// ListBuildsForProjectRequest generates a "aws/request.Request" representing the
// client's request for the ListBuildsForProject operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListBuildsForProject method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListBuildsForProjectRequest method.
//    req, resp := client.ListBuildsForProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) ListBuildsForProjectRequest(input *ListBuildsForProjectInput) (req *request.Request, output *ListBuildsForProjectOutput) {
	op := &request.Operation{
		Name:       opListBuildsForProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBuildsForProjectInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListBuildsForProjectOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) ListBuildsForProject(input *ListBuildsForProjectInput) (*ListBuildsForProjectOutput, error) {
	req, out := c.ListBuildsForProjectRequest(input)
	err := req.Send()
	return out, err
}

const opListBuilds_New = "ListBuilds_New"

// ListBuilds_NewRequest generates a "aws/request.Request" representing the
// client's request for the ListBuilds_New operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListBuilds_New method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListBuilds_NewRequest method.
//    req, resp := client.ListBuilds_NewRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) ListBuilds_NewRequest(input *ListBuilds_NewInput) (req *request.Request, output *ListBuilds_NewOutput) {
	op := &request.Operation{
		Name:       opListBuilds_New,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBuilds_NewInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListBuilds_NewOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) ListBuilds_New(input *ListBuilds_NewInput) (*ListBuilds_NewOutput, error) {
	req, out := c.ListBuilds_NewRequest(input)
	err := req.Send()
	return out, err
}

const opListCuratedEnvironmentImages = "ListCuratedEnvironmentImages"

// ListCuratedEnvironmentImagesRequest generates a "aws/request.Request" representing the
// client's request for the ListCuratedEnvironmentImages operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListCuratedEnvironmentImages method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListCuratedEnvironmentImagesRequest method.
//    req, resp := client.ListCuratedEnvironmentImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) ListCuratedEnvironmentImagesRequest(input *ListCuratedEnvironmentImagesInput) (req *request.Request, output *ListCuratedEnvironmentImagesOutput) {
	op := &request.Operation{
		Name:       opListCuratedEnvironmentImages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListCuratedEnvironmentImagesInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListCuratedEnvironmentImagesOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) ListCuratedEnvironmentImages(input *ListCuratedEnvironmentImagesInput) (*ListCuratedEnvironmentImagesOutput, error) {
	req, out := c.ListCuratedEnvironmentImagesRequest(input)
	err := req.Send()
	return out, err
}

const opListProjects = "ListProjects"

// ListProjectsRequest generates a "aws/request.Request" representing the
// client's request for the ListProjects operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the ListProjects method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the ListProjectsRequest method.
//    req, resp := client.ListProjectsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) ListProjectsRequest(input *ListProjectsInput) (req *request.Request, output *ListProjectsOutput) {
	op := &request.Operation{
		Name:       opListProjects,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListProjectsInput{}
	}

	req = c.newRequest(op, input, output)
	output = &ListProjectsOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) ListProjects(input *ListProjectsInput) (*ListProjectsOutput, error) {
	req, out := c.ListProjectsRequest(input)
	err := req.Send()
	return out, err
}

const opStartBuild = "StartBuild"

// StartBuildRequest generates a "aws/request.Request" representing the
// client's request for the StartBuild operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the StartBuild method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the StartBuildRequest method.
//    req, resp := client.StartBuildRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) StartBuildRequest(input *StartBuildInput) (req *request.Request, output *StartBuildOutput) {
	op := &request.Operation{
		Name:       opStartBuild,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartBuildInput{}
	}

	req = c.newRequest(op, input, output)
	output = &StartBuildOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) StartBuild(input *StartBuildInput) (*StartBuildOutput, error) {
	req, out := c.StartBuildRequest(input)
	err := req.Send()
	return out, err
}

const opStopBuild = "StopBuild"

// StopBuildRequest generates a "aws/request.Request" representing the
// client's request for the StopBuild operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the StopBuild method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the StopBuildRequest method.
//    req, resp := client.StopBuildRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) StopBuildRequest(input *StopBuildInput) (req *request.Request, output *StopBuildOutput) {
	op := &request.Operation{
		Name:       opStopBuild,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopBuildInput{}
	}

	req = c.newRequest(op, input, output)
	output = &StopBuildOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) StopBuild(input *StopBuildInput) (*StopBuildOutput, error) {
	req, out := c.StopBuildRequest(input)
	err := req.Send()
	return out, err
}

const opUpdateProject = "UpdateProject"

// UpdateProjectRequest generates a "aws/request.Request" representing the
// client's request for the UpdateProject operation. The "output" return
// value can be used to capture response data after the request's "Send" method
// is called.
//
// Creating a request object using this method should be used when you want to inject
// custom logic into the request's lifecycle using a custom handler, or if you want to
// access properties on the request object before or after sending the request. If
// you just want the service response, call the UpdateProject method directly
// instead.
//
// Note: You must call the "Send" method on the returned request object in order
// to execute the request.
//
//    // Example sending a request using the UpdateProjectRequest method.
//    req, resp := client.UpdateProjectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
func (c *CodeBuild) UpdateProjectRequest(input *UpdateProjectInput) (req *request.Request, output *UpdateProjectOutput) {
	op := &request.Operation{
		Name:       opUpdateProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateProjectInput{}
	}

	req = c.newRequest(op, input, output)
	output = &UpdateProjectOutput{}
	req.Data = output
	return
}

func (c *CodeBuild) UpdateProject(input *UpdateProjectInput) (*UpdateProjectOutput, error) {
	req, out := c.UpdateProjectRequest(input)
	err := req.Send()
	return out, err
}

type ArtifactLocation struct {
	_ struct{} `type:"structure"`

	Location *string `locationName:"location" type:"string"`

	OutputName *string `locationName:"outputName" min:"1" type:"string"`

	Packaging *string `locationName:"packaging" type:"string" enum:"ArtifactPackaging"`

	Type *string `locationName:"type" type:"string" enum:"ArtifactsType"`
}

// String returns the string representation
func (s ArtifactLocation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ArtifactLocation) GoString() string {
	return s.String()
}

type BatchGetBuilds_NewInput struct {
	_ struct{} `type:"structure"`

	Ids []*string `locationName:"ids" type:"list"`
}

// String returns the string representation
func (s BatchGetBuilds_NewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchGetBuilds_NewInput) GoString() string {
	return s.String()
}

type BatchGetBuilds_NewOutput struct {
	_ struct{} `type:"structure"`

	Builds []*Build `locationName:"builds" type:"list"`

	BuildsNotFound []*string `locationName:"buildsNotFound" type:"list"`
}

// String returns the string representation
func (s BatchGetBuilds_NewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchGetBuilds_NewOutput) GoString() string {
	return s.String()
}

type BatchGetProjectsInput struct {
	_ struct{} `type:"structure"`

	Names []*string `locationName:"names" type:"list" required:"true"`
}

// String returns the string representation
func (s BatchGetProjectsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchGetProjectsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchGetProjectsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchGetProjectsInput"}
	if s.Names == nil {
		invalidParams.Add(request.NewErrParamRequired("Names"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type BatchGetProjectsOutput struct {
	_ struct{} `type:"structure"`

	Projects []*Project `locationName:"projects" type:"list"`

	ProjectsNotFound []*string `locationName:"projectsNotFound" type:"list"`
}

// String returns the string representation
func (s BatchGetProjectsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchGetProjectsOutput) GoString() string {
	return s.String()
}

type Build struct {
	_ struct{} `type:"structure"`

	Arn *string `locationName:"arn" min:"1" type:"string"`

	Artifacts *ArtifactLocation `locationName:"artifacts" type:"structure"`

	BuildComplete *bool `locationName:"buildComplete" type:"boolean"`

	BuildStatus *string `locationName:"buildStatus" type:"string" enum:"StatusType"`

	Created *time.Time `locationName:"created" type:"timestamp" timestampFormat:"unix"`

	CurrentPhase *string `locationName:"currentPhase" type:"string"`

	Id *string `locationName:"id" min:"1" type:"string"`

	Logs *LogsLocation `locationName:"logs" type:"structure"`

	Phases []*BuildPhase `locationName:"phases" type:"list"`

	ProjectName *string `locationName:"projectName" min:"1" type:"string"`

	SourceVersion *string `locationName:"sourceVersion" min:"1" type:"string"`
}

// String returns the string representation
func (s Build) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Build) GoString() string {
	return s.String()
}

type BuildInfo struct {
	_ struct{} `type:"structure"`

	ArtifactLocations map[string]*string `locationName:"artifactLocations" type:"map"`

	BuildArn *string `locationName:"buildArn" type:"string"`

	BuildComplete *bool `locationName:"buildComplete" type:"boolean"`

	BuildDefinitionArn *string `locationName:"buildDefinitionArn" type:"string"`

	BuildDefinitionId *string `locationName:"buildDefinitionId" type:"string"`

	BuildPhase *string `locationName:"buildPhase" type:"string"`

	BuildPhaseHistory []*BuildPhaseTransition `locationName:"buildPhaseHistory" type:"list"`

	BuildState *string `locationName:"buildState" type:"string"`

	CloudWatchLogsLocations map[string]*string `locationName:"cloudWatchLogsLocations" type:"map"`

	CreateTime *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s BuildInfo) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BuildInfo) GoString() string {
	return s.String()
}

type BuildPhase struct {
	_ struct{} `type:"structure"`

	Contexts []*PhaseContext `locationName:"contexts" type:"list"`

	DurationInSeconds *int64 `locationName:"durationInSeconds" type:"long"`

	EndTime *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"unix"`

	PhaseStatus *string `locationName:"phaseStatus" type:"string" enum:"StatusType"`

	PhaseType *string `locationName:"phaseType" type:"string" enum:"BuildPhaseType"`

	StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s BuildPhase) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BuildPhase) GoString() string {
	return s.String()
}

type BuildPhaseContext struct {
	_ struct{} `type:"structure"`

	Message *string `locationName:"message" type:"string"`

	StatusCode *string `locationName:"statusCode" type:"string"`
}

// String returns the string representation
func (s BuildPhaseContext) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BuildPhaseContext) GoString() string {
	return s.String()
}

type BuildPhaseTransition struct {
	_ struct{} `type:"structure"`

	Contexts []*BuildPhaseContext `locationName:"contexts" type:"list"`

	SourcePhase *string `locationName:"sourcePhase" type:"string"`

	TargetPhase *string `locationName:"targetPhase" type:"string"`

	TransitionState *string `locationName:"transitionState" type:"string"`

	TransitionTime *time.Time `locationName:"transitionTime" type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s BuildPhaseTransition) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BuildPhaseTransition) GoString() string {
	return s.String()
}

type Cluster struct {
	_ struct{} `type:"structure"`

	Arn *string `locationName:"arn" type:"string"`

	Created *time.Time `locationName:"created" type:"timestamp" timestampFormat:"unix"`

	Description *string `locationName:"description" type:"string"`

	EncryptionKey *string `locationName:"encryptionKey" min:"1" type:"string"`

	LastModified *time.Time `locationName:"lastModified" type:"timestamp" timestampFormat:"unix"`

	Name *string `locationName:"name" type:"string"`

	ServiceRole *string `locationName:"serviceRole" min:"1" type:"string"`

	TimeoutInMinutes *int64 `locationName:"timeoutInMinutes" type:"integer"`
}

// String returns the string representation
func (s Cluster) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Cluster) GoString() string {
	return s.String()
}

type ContainerConfiguration struct {
	_ struct{} `type:"structure"`

	Cpu *int64 `locationName:"cpu" type:"integer"`

	EnvironmentVariables map[string]*string `locationName:"environmentVariables" type:"map"`

	Image *string `locationName:"image" min:"1" type:"string"`

	Memory *int64 `locationName:"memory" type:"integer"`

	Privileged *bool `locationName:"privileged" type:"boolean"`

	Tag *string `locationName:"tag" min:"1" type:"string"`
}

// String returns the string representation
func (s ContainerConfiguration) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ContainerConfiguration) GoString() string {
	return s.String()
}

type ContainerEnvironment struct {
	_ struct{} `type:"structure"`

	ArtifactsS3Bucket *string `locationName:"artifactsS3Bucket" min:"1" type:"string"`

	ContainerConfigurations []*ContainerConfiguration `locationName:"containerConfigurations" type:"list"`

	EncryptionKey *string `locationName:"encryptionKey" min:"1" type:"string"`

	EnvironmentVariables map[string]*string `locationName:"environmentVariables" type:"map"`

	FinishNotificationTopic *string `locationName:"finishNotificationTopic" type:"string"`

	Name *string `locationName:"name" min:"1" type:"string"`

	ServiceIAMRole *string `locationName:"serviceIAMRole" type:"string"`

	Timeout *int64 `locationName:"timeout" type:"integer"`
}

// String returns the string representation
func (s ContainerEnvironment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ContainerEnvironment) GoString() string {
	return s.String()
}

type CreateProjectInput struct {
	_ struct{} `type:"structure"`

	Artifacts *ProjectArtifacts `locationName:"artifacts" type:"structure" required:"true"`

	Description *string `locationName:"description" type:"string"`

	EncryptionKey *string `locationName:"encryptionKey" min:"1" type:"string"`

	Environment *ProjectEnvironment `locationName:"environment" type:"structure" required:"true"`

	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	ServiceRole *string `locationName:"serviceRole" min:"1" type:"string"`

	Source *ProjectSource `locationName:"source" type:"structure" required:"true"`

	TimeoutInMinutes *int64 `locationName:"timeoutInMinutes" type:"integer"`
}

// String returns the string representation
func (s CreateProjectInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateProjectInput"}
	if s.Artifacts == nil {
		invalidParams.Add(request.NewErrParamRequired("Artifacts"))
	}
	if s.EncryptionKey != nil && len(*s.EncryptionKey) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("EncryptionKey", 1))
	}
	if s.Environment == nil {
		invalidParams.Add(request.NewErrParamRequired("Environment"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.ServiceRole != nil && len(*s.ServiceRole) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("ServiceRole", 1))
	}
	if s.Source == nil {
		invalidParams.Add(request.NewErrParamRequired("Source"))
	}
	if s.Artifacts != nil {
		if err := s.Artifacts.Validate(); err != nil {
			invalidParams.AddNested("Artifacts", err.(request.ErrInvalidParams))
		}
	}
	if s.Environment != nil {
		if err := s.Environment.Validate(); err != nil {
			invalidParams.AddNested("Environment", err.(request.ErrInvalidParams))
		}
	}
	if s.Source != nil {
		if err := s.Source.Validate(); err != nil {
			invalidParams.AddNested("Source", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type CreateProjectOutput struct {
	_ struct{} `type:"structure"`

	Project *Project `locationName:"project" type:"structure"`
}

// String returns the string representation
func (s CreateProjectOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateProjectOutput) GoString() string {
	return s.String()
}

type CreateTimeRange struct {
	_ struct{} `type:"structure"`

	EndTime *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"unix"`

	StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s CreateTimeRange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTimeRange) GoString() string {
	return s.String()
}

type DeleteProjectInput struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteProjectInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteProjectInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeleteProjectOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteProjectOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteProjectOutput) GoString() string {
	return s.String()
}

type EnvironmentImage struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s EnvironmentImage) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentImage) GoString() string {
	return s.String()
}

type EnvironmentInfo struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" type:"string"`

	Type *string `locationName:"type" type:"string" enum:"EnvironmentType"`
}

// String returns the string representation
func (s EnvironmentInfo) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentInfo) GoString() string {
	return s.String()
}

type EnvironmentLanguage struct {
	_ struct{} `type:"structure"`

	Images []*EnvironmentImage `locationName:"images" type:"list"`

	Language *string `locationName:"language" type:"string" enum:"LanguageType"`
}

// String returns the string representation
func (s EnvironmentLanguage) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentLanguage) GoString() string {
	return s.String()
}

type EnvironmentPlatform struct {
	_ struct{} `type:"structure"`

	Languages []*EnvironmentLanguage `locationName:"languages" type:"list"`

	Platform *string `locationName:"platform" type:"string" enum:"PlatformType"`
}

// String returns the string representation
func (s EnvironmentPlatform) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentPlatform) GoString() string {
	return s.String()
}

type EnvironmentVariable struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	Value *string `locationName:"value" type:"string" required:"true"`
}

// String returns the string representation
func (s EnvironmentVariable) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnvironmentVariable) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnvironmentVariable) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnvironmentVariable"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.Value == nil {
		invalidParams.Add(request.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ListBuildsForProjectInput struct {
	_ struct{} `type:"structure"`

	NextToken *string `locationName:"nextToken" type:"string"`

	ProjectName *string `locationName:"projectName" min:"1" type:"string" required:"true"`

	SortOrder *string `locationName:"sortOrder" type:"string" enum:"SortOrderType"`
}

// String returns the string representation
func (s ListBuildsForProjectInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBuildsForProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListBuildsForProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListBuildsForProjectInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}
	if s.ProjectName != nil && len(*s.ProjectName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("ProjectName", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ListBuildsForProjectOutput struct {
	_ struct{} `type:"structure"`

	Ids []*string `locationName:"ids" type:"list"`

	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s ListBuildsForProjectOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBuildsForProjectOutput) GoString() string {
	return s.String()
}

type ListBuilds_NewInput struct {
	_ struct{} `type:"structure"`

	NextToken *string `locationName:"nextToken" type:"string"`

	SortOrder *string `locationName:"sortOrder" type:"string" enum:"SortOrderType"`
}

// String returns the string representation
func (s ListBuilds_NewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBuilds_NewInput) GoString() string {
	return s.String()
}

type ListBuilds_NewOutput struct {
	_ struct{} `type:"structure"`

	Ids []*string `locationName:"ids" type:"list"`

	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s ListBuilds_NewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBuilds_NewOutput) GoString() string {
	return s.String()
}

type ListCuratedEnvironmentImagesInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListCuratedEnvironmentImagesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCuratedEnvironmentImagesInput) GoString() string {
	return s.String()
}

type ListCuratedEnvironmentImagesOutput struct {
	_ struct{} `type:"structure"`

	Platforms []*EnvironmentPlatform `locationName:"platforms" type:"list"`
}

// String returns the string representation
func (s ListCuratedEnvironmentImagesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCuratedEnvironmentImagesOutput) GoString() string {
	return s.String()
}

type ListProjectsInput struct {
	_ struct{} `type:"structure"`

	NextToken *string `locationName:"nextToken" min:"1" type:"string"`
}

// String returns the string representation
func (s ListProjectsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProjectsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListProjectsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListProjectsInput"}
	if s.NextToken != nil && len(*s.NextToken) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("NextToken", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ListProjectsOutput struct {
	_ struct{} `type:"structure"`

	NextToken *string `locationName:"nextToken" type:"string"`

	Projects []*string `locationName:"projects" type:"list"`
}

// String returns the string representation
func (s ListProjectsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProjectsOutput) GoString() string {
	return s.String()
}

type LogsLocation struct {
	_ struct{} `type:"structure"`

	DeepLink *string `locationName:"deepLink" type:"string"`

	GroupName *string `locationName:"groupName" type:"string"`

	StreamName *string `locationName:"streamName" type:"string"`
}

// String returns the string representation
func (s LogsLocation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LogsLocation) GoString() string {
	return s.String()
}

type PhaseContext struct {
	_ struct{} `type:"structure"`

	Message *string `locationName:"message" type:"string"`

	StatusCode *string `locationName:"statusCode" type:"string"`
}

// String returns the string representation
func (s PhaseContext) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PhaseContext) GoString() string {
	return s.String()
}

type Project struct {
	_ struct{} `type:"structure"`

	Arn *string `locationName:"arn" type:"string"`

	Artifacts *ProjectArtifacts `locationName:"artifacts" type:"structure"`

	Created *time.Time `locationName:"created" type:"timestamp" timestampFormat:"unix"`

	Description *string `locationName:"description" type:"string"`

	EncryptionKey *string `locationName:"encryptionKey" min:"1" type:"string"`

	Environment *ProjectEnvironment `locationName:"environment" type:"structure"`

	LastModified *time.Time `locationName:"lastModified" type:"timestamp" timestampFormat:"unix"`

	Name *string `locationName:"name" type:"string"`

	ServiceRole *string `locationName:"serviceRole" min:"1" type:"string"`

	Source *ProjectSource `locationName:"source" type:"structure"`

	TimeoutInMinutes *int64 `locationName:"timeoutInMinutes" type:"integer"`
}

// String returns the string representation
func (s Project) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Project) GoString() string {
	return s.String()
}

type ProjectArtifacts struct {
	_ struct{} `type:"structure"`

	Location *string `locationName:"location" type:"string"`

	OutputName *string `locationName:"outputName" min:"1" type:"string"`

	Packaging *string `locationName:"packaging" type:"string" enum:"ArtifactPackaging"`

	Type *string `locationName:"type" type:"string" required:"true" enum:"ArtifactsType"`
}

// String returns the string representation
func (s ProjectArtifacts) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectArtifacts) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ProjectArtifacts) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ProjectArtifacts"}
	if s.OutputName != nil && len(*s.OutputName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("OutputName", 1))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ProjectEnvironment struct {
	_ struct{} `type:"structure"`

	ComputeType *string `locationName:"computeType" type:"string" required:"true" enum:"ComputeType"`

	EnvironmentVariables []*EnvironmentVariable `locationName:"environmentVariables" type:"list"`

	Image *string `locationName:"image" min:"1" type:"string" required:"true"`

	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	Type *string `locationName:"type" type:"string" required:"true" enum:"EnvironmentType"`
}

// String returns the string representation
func (s ProjectEnvironment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectEnvironment) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ProjectEnvironment) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ProjectEnvironment"}
	if s.ComputeType == nil {
		invalidParams.Add(request.NewErrParamRequired("ComputeType"))
	}
	if s.Image == nil {
		invalidParams.Add(request.NewErrParamRequired("Image"))
	}
	if s.Image != nil && len(*s.Image) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Image", 1))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}
	if s.EnvironmentVariables != nil {
		for i, v := range s.EnvironmentVariables {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "EnvironmentVariables", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ProjectSource struct {
	_ struct{} `type:"structure"`

	Buildspec *string `locationName:"buildspec" type:"string"`

	Location *string `locationName:"location" type:"string"`

	Type *string `locationName:"type" type:"string" required:"true" enum:"SourceType"`
}

// String returns the string representation
func (s ProjectSource) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectSource) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ProjectSource) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ProjectSource"}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type SourceProvider struct {
	_ struct{} `type:"structure"`

	Auth *SourceProviderAuth `locationName:"auth" type:"structure"`

	Location *string `locationName:"location" type:"string"`

	Type *string `locationName:"type" type:"string" enum:"SourceProviderType"`

	Version *string `locationName:"version" type:"string"`
}

// String returns the string representation
func (s SourceProvider) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SourceProvider) GoString() string {
	return s.String()
}

type SourceProviderAuth struct {
	_ struct{} `type:"structure"`

	Type *string `locationName:"type" type:"string" enum:"SourceProviderAuthType"`

	Value *string `locationName:"value" type:"string"`
}

// String returns the string representation
func (s SourceProviderAuth) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SourceProviderAuth) GoString() string {
	return s.String()
}

type StartBuildInput struct {
	_ struct{} `type:"structure"`

	ArtifactsOverride *ProjectArtifacts `locationName:"artifactsOverride" type:"structure"`

	BuildspecOverride *string `locationName:"buildspecOverride" type:"string"`

	EnvironmentVariablesOverride []*EnvironmentVariable `locationName:"environmentVariablesOverride" type:"list"`

	ProjectName *string `locationName:"projectName" min:"1" type:"string" required:"true"`

	SourceVersion *string `locationName:"sourceVersion" type:"string"`

	TimeoutInMinutesOverride *int64 `locationName:"timeoutInMinutesOverride" type:"integer"`
}

// String returns the string representation
func (s StartBuildInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StartBuildInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartBuildInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StartBuildInput"}
	if s.ProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("ProjectName"))
	}
	if s.ProjectName != nil && len(*s.ProjectName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("ProjectName", 1))
	}
	if s.ArtifactsOverride != nil {
		if err := s.ArtifactsOverride.Validate(); err != nil {
			invalidParams.AddNested("ArtifactsOverride", err.(request.ErrInvalidParams))
		}
	}
	if s.EnvironmentVariablesOverride != nil {
		for i, v := range s.EnvironmentVariablesOverride {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "EnvironmentVariablesOverride", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type StartBuildOutput struct {
	_ struct{} `type:"structure"`

	Build *Build `locationName:"build" type:"structure"`
}

// String returns the string representation
func (s StartBuildOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StartBuildOutput) GoString() string {
	return s.String()
}

type StopBuildInput struct {
	_ struct{} `type:"structure"`

	Id *string `locationName:"id" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s StopBuildInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StopBuildInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopBuildInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopBuildInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Id != nil && len(*s.Id) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Id", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type StopBuildOutput struct {
	_ struct{} `type:"structure"`

	Build *Build `locationName:"build" type:"structure"`
}

// String returns the string representation
func (s StopBuildOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StopBuildOutput) GoString() string {
	return s.String()
}

type UpdateProjectInput struct {
	_ struct{} `type:"structure"`

	Artifacts *ProjectArtifacts `locationName:"artifacts" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	EncryptionKey *string `locationName:"encryptionKey" min:"1" type:"string"`

	Environment *ProjectEnvironment `locationName:"environment" type:"structure"`

	Name *string `locationName:"name" min:"1" type:"string" required:"true"`

	ServiceRole *string `locationName:"serviceRole" min:"1" type:"string"`

	Source *ProjectSource `locationName:"source" type:"structure"`

	TimeoutInMinutes *int64 `locationName:"timeoutInMinutes" type:"integer"`
}

// String returns the string representation
func (s UpdateProjectInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateProjectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateProjectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateProjectInput"}
	if s.EncryptionKey != nil && len(*s.EncryptionKey) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("EncryptionKey", 1))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Name", 1))
	}
	if s.ServiceRole != nil && len(*s.ServiceRole) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("ServiceRole", 1))
	}
	if s.Artifacts != nil {
		if err := s.Artifacts.Validate(); err != nil {
			invalidParams.AddNested("Artifacts", err.(request.ErrInvalidParams))
		}
	}
	if s.Environment != nil {
		if err := s.Environment.Validate(); err != nil {
			invalidParams.AddNested("Environment", err.(request.ErrInvalidParams))
		}
	}
	if s.Source != nil {
		if err := s.Source.Validate(); err != nil {
			invalidParams.AddNested("Source", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UpdateProjectOutput struct {
	_ struct{} `type:"structure"`

	Project *Project `locationName:"project" type:"structure"`
}

// String returns the string representation
func (s UpdateProjectOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateProjectOutput) GoString() string {
	return s.String()
}

const (
	// @enum ArtifactPackaging
	ArtifactPackagingNone = "none"
	// @enum ArtifactPackaging
	ArtifactPackagingZip = "zip"
)

const (
	// @enum ArtifactsType
	ArtifactsTypeCodepipeline = "codepipeline"
	// @enum ArtifactsType
	ArtifactsTypeS3 = "s3"
)

const (
	// @enum BuildDefinitionStatus
	BuildDefinitionStatusActive = "ACTIVE"
	// @enum BuildDefinitionStatus
	BuildDefinitionStatusInactive = "INACTIVE"
)

const (
	// @enum BuildPhaseType
	BuildPhaseTypeSubmitted = "submitted"
	// @enum BuildPhaseType
	BuildPhaseTypeQueued = "queued"
	// @enum BuildPhaseType
	BuildPhaseTypeDownloadSource = "downloadSource"
	// @enum BuildPhaseType
	BuildPhaseTypeInstall = "install"
	// @enum BuildPhaseType
	BuildPhaseTypePreBuild = "preBuild"
	// @enum BuildPhaseType
	BuildPhaseTypeDuringBuild = "duringBuild"
	// @enum BuildPhaseType
	BuildPhaseTypePostBuild = "postBuild"
	// @enum BuildPhaseType
	BuildPhaseTypeUploadArtifacts = "upload_artifacts"
	// @enum BuildPhaseType
	BuildPhaseTypeFinalizing = "finalizing"
	// @enum BuildPhaseType
	BuildPhaseTypeCompleted = "completed"
)

const (
	// @enum ComputeType
	ComputeTypeSmall = "small"
	// @enum ComputeType
	ComputeTypeMedium = "medium"
	// @enum ComputeType
	ComputeTypeLarge = "large"
)

const (
	// @enum EnvironmentType
	EnvironmentTypeContainer = "container"
)

const (
	// @enum LanguageType
	LanguageTypeJava = "Java"
	// @enum LanguageType
	LanguageTypePython = "Python"
	// @enum LanguageType
	LanguageTypeNodeJs = "Node.js"
	// @enum LanguageType
	LanguageTypeRuby = "Ruby"
	// @enum LanguageType
	LanguageTypeGolang = "Golang"
)

const (
	// @enum PlatformType
	PlatformTypeDebian = "Debian"
	// @enum PlatformType
	PlatformTypeAmazonLinux = "Amazon Linux"
)

const (
	// @enum SortOrderType
	SortOrderTypeAscending = "ascending"
	// @enum SortOrderType
	SortOrderTypeDescending = "descending"
)

const (
	// @enum SourceProviderAuthType
	SourceProviderAuthTypeOauth = "oauth"
)

const (
	// @enum SourceProviderType
	SourceProviderTypeGit = "git"
	// @enum SourceProviderType
	SourceProviderTypeS3 = "s3"
)

const (
	// @enum SourceType
	SourceTypeCodecommit = "codecommit"
	// @enum SourceType
	SourceTypeCodepipeline = "codepipeline"
	// @enum SourceType
	SourceTypeGithub = "github"
	// @enum SourceType
	SourceTypeBitbucket = "bitbucket"
	// @enum SourceType
	SourceTypeS3 = "s3"
)

const (
	// @enum StatusType
	StatusTypeSucceeded = "succeeded"
	// @enum StatusType
	StatusTypeFailed = "failed"
	// @enum StatusType
	StatusTypeFault = "fault"
	// @enum StatusType
	StatusTypeTimedOut = "timed_out"
	// @enum StatusType
	StatusTypeInProgress = "in_progress"
	// @enum StatusType
	StatusTypeStopped = "stopped"
)
